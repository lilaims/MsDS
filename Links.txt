Categorical
https://pandas.pydata.org/docs/reference/arrays.html#api-arrays-categorical
https://pandas.pydata.org/docs/user_guide/categorical.html#categorical-memory

Memory usage
The memory usage of a Categorical is proportional to the number of categories plus the length of the data. In contrast, an object dtype is a constant times the length of the data.

Sparse
Data where a single value is repeated many times (e.g. 0 or NaN) may be stored efficiently as a arrays.SparseArray.

This categorical data is different to encoding 

All values of categorical data are either in categories or np.nan. Order is defined by the order of categories, not lexical order of the values. Internally, the data structure consists of a categories array and an integer array of codes which point to the real value in the categories array.

The categorical data type is useful in the following cases:

A string variable consisting of only a few different values. Converting such a string variable to a categorical variable will save some memory, see here.

The lexical order of a variable is not the same as the logical order (“one”, “two”, “three”). By converting to a categorical and specifying an order on the categories, sorting and min/max will use the logical order instead of the lexical order, see here.

As a signal to other Python libraries that this column should be treated as a categorical variable (e.g. to use suitable statistical methods or plot types).


*******************************************
Different to categorical
Encoding - 
converting categorical data into numerical form 

1. Label Encoding - scikit-learn's LabelEncoder class
color = ['red', 'green', 'blue', 'blue', 'red', 'green']
encoder = LabelEncoder()
color_encoded = encoder.fit_transform(color)
print(color_encoded)
[2 1 0 0 2 1]

---------
2. One hot encoding 
gender = ['male', 'female', 'male', 'male', 'female']
gender_encoded = pd.get_dummies(gender)

  female  male
0       0     1
1       1     0
2       0     1
3       0     1
4       1     0

---------
3. Binary Encoding
import category_encoders as ce
import pandas as pd

city = ['New York', 'London', 'Paris', 'Tokyo', 'Paris']
encoder = ce.BinaryEncoder(cols=['city'])
city_encoded = encoder.fit_transform(pd.DataFrame(city, columns=['city']))
